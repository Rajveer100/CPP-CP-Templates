std::vector<ll> segTree, lazy;
 
ll rangeQuery(ll node, ll left, ll right, ll l, ll r) {
    
    if(lazy[node]) {
        
        segTree[node]+=lazy[node];
        
        if(left!=right) {
            
            lazy[2*node]+=lazy[node];
            lazy[2*node+1]+=lazy[node];
        }
        
        lazy[node]=0;
    }
    
    if(left>=l && right<=r) {
        
        return segTree[node];
    } else if(right<l || left>r) {
        
        return 1e13+5;
    } else {
        
        ll mid=(left+right)/2;
        
        return std::min(rangeQuery(2*node, left, mid, l, r), rangeQuery(2*node+1, mid+1, right, l, r));
    }
}
 
void rangeUpdate(ll node, ll left, ll right, ll l, ll r, ll newVal) {
    
    if(lazy[node]) {
        
        segTree[node]+=lazy[node];
        
        if(left!=right) {
            
            lazy[2*node]+=lazy[node];
            lazy[2*node+1]+=lazy[node];
        }
        
        lazy[node]=0;
    }
    
    if(left>=l && right<=r) {
        
        segTree[node]+=newVal;
        
        if(left!=right) {
            
            lazy[2*node]+=newVal;
            lazy[2*node+1]+=newVal;
        }
    } else if(right<l || left>r) {
        
        return;
    } else {
        
        ll mid=(left+right)/2;
        
        rangeUpdate(2*node, left, mid, l, r, newVal);
        rangeUpdate(2*node+1, mid+1, right, l, r, newVal);
        segTree[node]=std::min(segTree[2*node], segTree[2*node+1]);
    }
}

void pointUpdate(ll n, ll pos, ll newVal) {
 
    segTree[n+pos]=newVal;
    
    for(ll j=(n+pos)/2;j>=1;j/=2) {
        
        segTree[j]=std::min(segTree[2*j], segTree[2*j+1]);
    }
}
 
void buildTree(ll &n, std::vector<ll> a) {
    
    ll num=n;
    
    n=(1ll<<ll(std::ceil(log2(n*1.0))));
    
    segTree.resize(2*n);
    lazy.resize(2*n);
    
    for(ll i=0;i<=num-1;i++) {
        
        segTree[n+i]=a[i];
    }
    
    for(ll i=num;i<=n-1;i++) {
        
        segTree[n+i]=1e13+5;
    }
    
    for(ll i=n-1;i>=1;i--) {
        
        segTree[i]=std::min(segTree[2*i], segTree[2*i+1]);
    }
}